/*
 * This file is generated by jOOQ.
 */
package fi.morabotti.skydive.db.tables;


import fi.morabotti.skydive.db.DefaultSchema;
import fi.morabotti.skydive.db.Indexes;
import fi.morabotti.skydive.db.Keys;
import fi.morabotti.skydive.db.enums.ClubActivityAccess;
import fi.morabotti.skydive.db.enums.ClubActivityType;
import fi.morabotti.skydive.db.tables.records.ClubActivityRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClubActivity extends TableImpl<ClubActivityRecord> {

    private static final long serialVersionUID = -1053281187;

    /**
     * The reference instance of <code>club_activity</code>
     */
    public static final ClubActivity CLUB_ACTIVITY = new ClubActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClubActivityRecord> getRecordType() {
        return ClubActivityRecord.class;
    }

    /**
     * The column <code>club_activity.id</code>.
     */
    public final TableField<ClubActivityRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>club_activity.type</code>.
     */
    public final TableField<ClubActivityRecord, ClubActivityType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(4).nullable(false).asEnumDataType(fi.morabotti.skydive.db.enums.ClubActivityType.class), this, "");

    /**
     * The column <code>club_activity.description</code>.
     */
    public final TableField<ClubActivityRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>club_activity.access</code>.
     */
    public final TableField<ClubActivityRecord, ClubActivityAccess> ACCESS = createField("access", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).asEnumDataType(fi.morabotti.skydive.db.enums.ClubActivityAccess.class), this, "");

    /**
     * The column <code>club_activity.visible</code>.
     */
    public final TableField<ClubActivityRecord, Boolean> VISIBLE = createField("visible", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>club_activity.start_date</code>.
     */
    public final TableField<ClubActivityRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>club_activity.end_date</code>.
     */
    public final TableField<ClubActivityRecord, Timestamp> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>club_activity.created_at</code>.
     */
    public final TableField<ClubActivityRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>club_activity.deleted_at</code>.
     */
    public final TableField<ClubActivityRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>club_activity.club_id</code>.
     */
    public final TableField<ClubActivityRecord, Long> CLUB_ID = createField("club_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>club_activity</code> table reference
     */
    public ClubActivity() {
        this(DSL.name("club_activity"), null);
    }

    /**
     * Create an aliased <code>club_activity</code> table reference
     */
    public ClubActivity(String alias) {
        this(DSL.name(alias), CLUB_ACTIVITY);
    }

    /**
     * Create an aliased <code>club_activity</code> table reference
     */
    public ClubActivity(Name alias) {
        this(alias, CLUB_ACTIVITY);
    }

    private ClubActivity(Name alias, Table<ClubActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClubActivity(Name alias, Table<ClubActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ClubActivity(Table<O> child, ForeignKey<O, ClubActivityRecord> key) {
        super(child, key, CLUB_ACTIVITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLUB_ACTIVITY_FK_CLUB_ACTIVITY_CLUB_ID, Indexes.CLUB_ACTIVITY_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClubActivityRecord, Long> getIdentity() {
        return Keys.IDENTITY_CLUB_ACTIVITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClubActivityRecord>> getKeys() {
        return Arrays.<UniqueKey<ClubActivityRecord>>asList(Keys.KEY_CLUB_ACTIVITY_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClubActivityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClubActivityRecord, ?>>asList(Keys.FK_CLUB_ACTIVITY_CLUB_ID);
    }

    public Club club() {
        return new Club(this, Keys.FK_CLUB_ACTIVITY_CLUB_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClubActivity as(String alias) {
        return new ClubActivity(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClubActivity as(Name alias) {
        return new ClubActivity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClubActivity rename(String name) {
        return new ClubActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClubActivity rename(Name name) {
        return new ClubActivity(name, null);
    }
}
