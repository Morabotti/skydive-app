/*
 * This file is generated by jOOQ.
 */
package fi.morabotti.skydive.db.tables;


import fi.morabotti.skydive.db.DefaultSchema;
import fi.morabotti.skydive.db.Indexes;
import fi.morabotti.skydive.db.Keys;
import fi.morabotti.skydive.db.tables.records.ClubRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Club extends TableImpl<ClubRecord> {

    private static final long serialVersionUID = 183058970;

    /**
     * The reference instance of <code>club</code>
     */
    public static final Club CLUB = new Club();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClubRecord> getRecordType() {
        return ClubRecord.class;
    }

    /**
     * The column <code>club.id</code>.
     */
    public final TableField<ClubRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>club.name</code>.
     */
    public final TableField<ClubRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>club.slug</code>.
     */
    public final TableField<ClubRecord, String> SLUG = createField("slug", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>club.public</code>.
     */
    public final TableField<ClubRecord, Boolean> PUBLIC = createField("public", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>club.deleted_at</code>.
     */
    public final TableField<ClubRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>club.creator_account_id</code>.
     */
    public final TableField<ClubRecord, Long> CREATOR_ACCOUNT_ID = createField("creator_account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>club</code> table reference
     */
    public Club() {
        this(DSL.name("club"), null);
    }

    /**
     * Create an aliased <code>club</code> table reference
     */
    public Club(String alias) {
        this(DSL.name(alias), CLUB);
    }

    /**
     * Create an aliased <code>club</code> table reference
     */
    public Club(Name alias) {
        this(alias, CLUB);
    }

    private Club(Name alias, Table<ClubRecord> aliased) {
        this(alias, aliased, null);
    }

    private Club(Name alias, Table<ClubRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Club(Table<O> child, ForeignKey<O, ClubRecord> key) {
        super(child, key, CLUB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLUB_FK_CLUB_CREATOR_ACCOUNT, Indexes.CLUB_ID, Indexes.CLUB_SLUG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClubRecord, Long> getIdentity() {
        return Keys.IDENTITY_CLUB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClubRecord>> getKeys() {
        return Arrays.<UniqueKey<ClubRecord>>asList(Keys.KEY_CLUB_ID, Keys.KEY_CLUB_SLUG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClubRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClubRecord, ?>>asList(Keys.FK_CLUB_CREATOR_ACCOUNT);
    }

    public Account account() {
        return new Account(this, Keys.FK_CLUB_CREATOR_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Club as(String alias) {
        return new Club(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Club as(Name alias) {
        return new Club(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Club rename(String name) {
        return new Club(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Club rename(Name name) {
        return new Club(name, null);
    }
}
